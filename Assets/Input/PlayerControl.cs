//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""PlayerController"",
            ""id"": ""3d08212a-6794-4033-9c8b-2bc5e5a01f3b"",
            ""actions"": [
                {
                    ""name"": ""MoveLeftPlayer"",
                    ""type"": ""Button"",
                    ""id"": ""8caa2a20-084f-43eb-ab6a-092e53949e0c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRightPlayer"",
                    ""type"": ""Value"",
                    ""id"": ""6a625b1f-a987-4fe2-837e-4ad291829263"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""63b97d6e-ae6b-4452-8eaa-bf6d8d91fce5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRightPlayer"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""30b7efbc-687b-4669-a178-8a20a82d620a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRightPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""140fe649-d0b2-4be9-9869-e7d4449210b4"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRightPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a9105d7f-b4b1-4b40-9fdb-25fb706ad849"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftPlayer"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""49209cb3-0c76-41a2-a1ff-ec08685faa57"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""607a1993-1586-4cd4-bc19-59528c0067b1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerController
        m_PlayerController = asset.FindActionMap("PlayerController", throwIfNotFound: true);
        m_PlayerController_MoveLeftPlayer = m_PlayerController.FindAction("MoveLeftPlayer", throwIfNotFound: true);
        m_PlayerController_MoveRightPlayer = m_PlayerController.FindAction("MoveRightPlayer", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerController
    private readonly InputActionMap m_PlayerController;
    private IPlayerControllerActions m_PlayerControllerActionsCallbackInterface;
    private readonly InputAction m_PlayerController_MoveLeftPlayer;
    private readonly InputAction m_PlayerController_MoveRightPlayer;
    public struct PlayerControllerActions
    {
        private @PlayerControl m_Wrapper;
        public PlayerControllerActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveLeftPlayer => m_Wrapper.m_PlayerController_MoveLeftPlayer;
        public InputAction @MoveRightPlayer => m_Wrapper.m_PlayerController_MoveRightPlayer;
        public InputActionMap Get() { return m_Wrapper.m_PlayerController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControllerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControllerActions instance)
        {
            if (m_Wrapper.m_PlayerControllerActionsCallbackInterface != null)
            {
                @MoveLeftPlayer.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMoveLeftPlayer;
                @MoveLeftPlayer.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMoveLeftPlayer;
                @MoveLeftPlayer.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMoveLeftPlayer;
                @MoveRightPlayer.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMoveRightPlayer;
                @MoveRightPlayer.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMoveRightPlayer;
                @MoveRightPlayer.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMoveRightPlayer;
            }
            m_Wrapper.m_PlayerControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveLeftPlayer.started += instance.OnMoveLeftPlayer;
                @MoveLeftPlayer.performed += instance.OnMoveLeftPlayer;
                @MoveLeftPlayer.canceled += instance.OnMoveLeftPlayer;
                @MoveRightPlayer.started += instance.OnMoveRightPlayer;
                @MoveRightPlayer.performed += instance.OnMoveRightPlayer;
                @MoveRightPlayer.canceled += instance.OnMoveRightPlayer;
            }
        }
    }
    public PlayerControllerActions @PlayerController => new PlayerControllerActions(this);
    public interface IPlayerControllerActions
    {
        void OnMoveLeftPlayer(InputAction.CallbackContext context);
        void OnMoveRightPlayer(InputAction.CallbackContext context);
    }
}
